h1. codecs 

h2. Purpose

Provides facility to register encoders and decoders of textual data as methods on any object

h2. Examples

bc.
class HTMLCodec {
    static encode = { theTarget ->
        HtmlUtils.htmlEscape(theTarget.toString())
    }    
    static decode = { theTarget ->
    	HtmlUtils.htmlUnescape(theTarget.toString())
    }
}
assert "&lt;p&gt;Hello World!&lt;/p&gt;" == "<p>Hello World!</p>".encodeAsHTML()
assert "<p>Hello World!</p>" == "&lt;p&gt;Hello World!&lt;/p&gt;".decodeHTML()

h2. Description

This plug-in searches for classes that end in the convention @Codec@ and dynamically registers @encodeAs[Codec]@ and @decode[Codec]@ methods on @java.lang.Object@ so that any data can be encoded and decoded. For more information refer to the section of [Encoding and Decoding Strings|guide:codecs] in the user guide.

Provided Codecs:

* @HTMLCodec@ - encodes/decodes HTML mark-up
* @URLCodec@ - encodes/decodes URLs
* @JavascriptCodec@ - encodes (escapes) Javascript
* @Base64Codec@ - encodes/decodes Base64 data



