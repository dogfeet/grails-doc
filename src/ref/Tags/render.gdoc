h1. render 

h2. Purpose

Applies an inbuilt or user defined Groovy template against a model so that templates can be re-used for lists or instance or a single instance

h2. Examples

Example domain class:

{code:java}
class Book {
     String title
     String author
}
{code}

Example template:

{code:java}
<p>${it.title}</p>
<p>${it.author}</p>
{code}

This template can now be re-used whether you have a list of books or a single book. For a list the template will be repeated for each instance:

{code:xml}
<g:render template="displaybook" collection="${books}" />{code}

or

{code:xml}
<g:render template="displaybook" bean="${book}" />{code}

or you could create a template that handles a certain type of model. For example the template below:

{code:xml}
<p><%= book.title %></p>
<p><%= author.fullName %></p>
{code}

Could be used with the model as below. The disadvantage of this technique however is that the template is less re-usable

{code:xml}
<g:render template="displaybook" model="['book':book,'author':author]" />{code}

It is also possible to define the name of the variable to be used by the template in the render tag:

Example template:

{code:java}
<p>${myBook.title}</p>
<p>${myBook.author}</p>
{code}

Example render tag call for the above template

{code:xml}
<g:render template="displaybook" collection="${books}" var="myBook"/>{code}


h2. Description

Note that if the value of the template attribute starts with a '/' it will be resolved relative to the views folder. This is useful for sharing templates between views. Without the leading '/' it will be first be resolved relative to the current controller's view folder then, failing that, the top level views folder. In either case the template file must be named with a leading underscore ('_') but referenced in the template attribute without that underscore or the '.gsp' suffix.

Attributes

* @template@ (required) - The name of the template to apply
* @bean@ (optional) - The bean to apply the template against
* @model@ (optional) - The model to apply the template against as a java.util.Map
* @collection@ (optional) - A collection of model objects to apply the template to
* @var@ (optional) - The variable name of the bean to be referenced in the template


h2. Source

{source:tag=RenderTagLib.render}
{source}


