h1. errors

h2. Purpose

An instance of the Spring [Errors|api:org.springframework.validation.Errors] interface that contains data binding and/or validation errors.

h2. Examples

{code:java}
def user =  new User(params)

if(user.validate()) {
    // do something with user
}
else {
    user.errors.allErrors.each {
        println it
    }
}
{code}

h2. Description

The @errors@ property is an instance of Spring's [Errors|api:org.springframework.validation.Errors] interface which is used by Grails during [Data Binding|guide:dataBinding] to store type conversion errors and during [Validation|guide:validation] when calling the [validate|domainClasses] or [save|domainClasses] methods.

You can create your own errors using the [reject|api:org.springframework.validation.Errors#reject(java.lang.String)] and [rejectValue|api:org.springframework.validation.Errors#rejectValue(java.lang.String,%20java.lang.String)] methods:

{code:java}
if (params.password != params.confirm_password) {

   user.errors.reject('user.password.doesnotmatch',                                    // Error code within the grails-app/i18n/message.properties
                      ['password', 'class User'] as Object[],                          // Groovy list cast to Object[]
                       '[Property [{0}] of class [{1}] does not match confirmation]')   // Default mapping string

    // The following helps with field highlighting in your view
    user.errors.rejectValue('password',                                                 // Field in view to highlight using <g:hasErrors> tag
                            'user.password.doesnotmatch')                               // i18n error code

    render(view:'signup', model:[user:user]) 
}
{code}

