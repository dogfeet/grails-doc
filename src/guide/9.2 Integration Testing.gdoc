통합 테스트는 모든 코드를 테스트할 수 있어야 한다는 점에서 유닛 테스트와 다르다 Grails는 통합 테스트에 HSQLDB라는 메모리 데이터베이스를 사용하고 각 테스트마다 데이터베이스의 모든 데이터를 삭제할 것이다.

h4. Testing Controllers(컨트롤러 테스트하기)

컨트롤러를 테스트하려면 먼저 스프링 Mock 라이브러리를 이해해야 한다.

Grails의 테스트에서는 내부적으로 [MockHttpServletRequest|api:org.springframework.mock.web.MockHttpServletRequest], [MockHttpServletResponse|api:org.springframework.mock.web.MockHttpServletResponse], [MockHttpSession|api:org.springframework.mock.web.MockHttpSession]을 사용한다. 다음과 같이 이 것들을 이용해서 테스트할 수 있다:

{code:java}
class FooController {

	def text = {
	    render "bar"
	}

	def someRedirect = {
		redirect(action:"bar")
	}
}{code}

다음과 같이 이 코드에 대한 테스트를 만든다:

{code:java}
class FooControllerTests extends GroovyTestCase {

  void testText() {
		def fc = new FooController()
		fc.text()
		assertEquals "bar", fc.response.contentAsString
	}

	void testSomeRedirect() {

		def fc = new FooController()
		fc.someRedirect()
		assertEquals "/foo/bar", fc.response.redirectedUrl
	}
}{code}

이 예제에서 응답은 MockHttpServletResponse의 인스턴스이다. 응답에 쓴 결과를 contentAsString으로 결과를 확인하거나 리다이렉트된 URL을 얻어오기 위해 사용한다. Servlet API의 Mock 버전은 실제 버전과 달라서 모든 것을 변경할 수 있고 contextPath같은 요청의 속성도 설정할 수 있다.

통합 테스트 중에는 액션이 호출될 때 Grails가 인터셉터([interceptors|guide:interceptors])를 자동으로 실행하지 않는다. 인터셉터를 테스트해야 한다면 인터셉터만 별도로 기능 테스트([functional testing|guide:functionalTesting])를 이용해 테스트한다.

h4. Testing Controllers with Services(서비스와 함께 컨트롤러 테스트하기)

만약 컨트롤러가 서비스를 참조하고 있다면 테스트에서 서비스를 명시적으로 초기화 시켜야 한다.

주어진 컨트롤러가 다음과 같으면:

{code:java}
class FilmStarsController {
    def popularityService
    
    def update = {
        // do something with popularityService
    }
}{code}

테스트를 다음과 같이 만들 수 있다:

{code:java}
class FilmStarsTests extends GroovyTestCase {
    def popularityService

    public void testInjectedServiceInController () {
        def fsc = new FilmStarsController()
        fsc.popularityService = popularityService
        fsc.update()
    }
}{code}

h4. Testing Controller Command Objects(컨트롤러의 커맨드 객체 테스트하기)

커맨드 객체로 요청에 파라미터를 제공하는 방법이 있다. 커맨드 객체는 파라미터 없이 액션이 호출되면 자동으로 실행된다:

다음과 같이 커맨드 객체를 사용하는 객체가 있을 때:

{code:java}
class AuthenticationController {
    def signup = { SignupForm form ->
        ...
    }
}{code}

다음과 같이 테스트를 할 수 있다:

{code:java}
def controller = new AuthenticationController()
controller.params.login = "marcpalmer"
controller.params.password = "secret"
controller.params.passwordConfirm = "secret"
controller.signup()
{code}

Grails는 마법처럼 자동으로 Mock 요청 파라미터들을 커맨드 객체에 할당시켜서 siginup 액션를 실행시킨다. 컨트롤러를 테스트 하는 동안 그레일즈가 제공하는 Mock 요청으로 params가 바뀔 수도 있다.

h4. Testing Controllers and the render Method(render 메소드를 사용하는 컨트롤러 테스트하기)

[render|controllers] 메소드를 사용하면 모든 액션에서 원하는 뷰를 렌더링할 수 있다. 예를 들어 다음과 같은 예제가 있을 때:

{code:java}
def save = {
	def book = Book(params)
	if(book.save()) {
		// handle
	}
	else {
		render(view:"create", model:[book:book])
	}
}
{code}

액션 모델의 결과는 반환되지 않지만 대신에 컨트롤러의 modelAndView 속성에 저장된다. modelAndView 속성은 Spring MVC's [ModelAndView|http://static.springframework.org/spring/docs/1.2.x/api/org/springframework/web/servlet/ModelAndView.html] 클래스의 인스턴스이고 이 속성을 사용하여 액션의 결과를 테스트할 수 있다:

{code:java}
def bookController = new BookController()
bookController.save()
def model = bookController.modelAndView.model.book
{code} 

h4. Simulating Request Data(요청 데이터 시뮬레이션)

액션을 테스트하려면 REST 웹 서비스처럼 어떤 요청 데이터가 필요하다. 이를 위해 스프링의 [MockHttpServletRequest|api:org.springframework.mock.web.MockHttpServletRequest] 객체를 사용할 수 있다. 예를 들어 다음의 액션은 들어오는 요청을 바인딩한다:

{code:java}
def create = {
	[book: new Book(params['book']) ]	
}
{code}

다음과 같이 XML로 book 파라미터를 시뮬레이션할 수 있다:

{code:java}
void testCreateWithXML() {
	def controller = new BookController()
	controller.request.contentType = 'text/xml'
	controller.request.contents = '''<?xml version="1.0" encoding="ISO-8859-1"?>
	<book>
		<title>The Stand</title>
		...
	</book>	
	'''.getBytes() // note we need the bytes
	
	def model = controller.create()
	assert model.book
	assertEquals "The Stand", model.book.title
}
{code}

JSON 요청에도 동일하게 적용할 수 있다:

{code:java}
void testCreateWithJSON() {
	def controller = new BookController()	
 	controller.request.contentType = "text/json"
 	controller.request.content = '{"id":1,"class":"Book","title":"The Stand"}'.getBytes()	

	def model = controller.create()
	assert model.book
	assertEquals "The Stand", model.book.title
	
}
{code}

{note}
JSON을 사용할 때에는 class 속성에 바인딩할 객체의 형식을 명시해야 한다는 것을 잊으면 안된다. XML에서는 <book>노드의 이름에서 유추하지만 JSON에서는 JSON 패킷에 이 속성을 명시해야 한다.
{note}

REST 웹 서비스에 대한 정보는 [REST|guide:REST] 절을 보라.

h4. Testing Web Flows(웹 플로우 테스트하기)

웹 플로우([Web Flows|guide:webflow])를 테스팅하는 것은 grails.test.WebFlowTestCase라는 특별한 테스트 도구harness가 필요하다. 이 클래스는 스프링 웹 플로우에 포함된 [AbstractFlowExecutionTests|api:org.springframework.webflow.test.execution.AbstractFlowExecutionTests] 서브클래스이다.

{note}
WebFlowTestCase의 서브클래스는 통합 테스트를 의미한다.
{note}

일반적으로 다음과 같은 플로우가 있을 때:

{code}
class ExampleController {
	def exampleFlow = {
		start {
			on("go") {
				flow.hello = "world"
			}.to "next"
		}
		next {
			on("back").to "start"
			on("go").to "end"
		}
		end()
	}	
}
{code}

어떤 플로우를 사용할 것인지 테스트 도구(harness)에 알려줘야 한다. 추상 메소드를 getFlow를 오버라이딩해서 테스트 도구에 알릴 수 있다:

{code}
class ExampleFlowTests extends grails.test.WebFlowTestCase {
	def getFlow() { new ExampleController().exampleFlow }
	...
}
{code}

만약 flow id를 명시해야 한다면 getFlowId 메소드를 오버라이딩해서 명시할 수 있다. 그렇지않으면 기본 값이 사용된다:

{code}
class ExampleFlowTests extends grails.test.WebFlowTestCase {
	String getFlowId() { "example" }
	...
}
{code}

이 것을 다 끝냈으면 startFlow 메소드로 flow를 시작할 수 있다다. 이 startFlow 메소드는 ViewSelection 객체를 반환한다:

{code}
void testExampleFlow() {
	def viewSelection = startFlow()
	
	assertEquals "start", viewSelection.viewName
	...
}
{code}

이 예제는 viewSelection 객체의 viewName 속성를 이용하여 현재 올바른 상태에 있는지 검사할 수 있다는 것을 보여준다. 그리고 siginalEvent 메소드를 사용하여 event를 발생시킬 수 있다:

{code}
void testExampleFlow() {
	...
	viewSelection = signalEvent("go")
	assertEquals "next", viewSelection.viewName
	assertEquals "world", viewSelection.model.hello
}
{code} 

여기서 “go” 이벤트를 실행시켜야 한다는 것을 플로우에 알렸다. 그래서 “next” 상태로 전이될 수 있다. 이 예제의 전이 액션은 flow 스콥의 hello 변수에 값을 채운다. 그리고 viewSelection의 model속성을 이용하여 변수의 값이 제대로 적용됐는지 검사할 수 있다.

h4. Testing Tag Libraries(태그 라이브러리 테스트하기)

태그가 메소드 처럼 실행될 때 결과를 실질적으로 문자열로 반환하기 때문에 태그 라이브러리를 테스트하는 것은 꽤 쉽다. 만약 다음과 같은 태그 라이브러리가 있다면:

{code:java}
class FooTagLib {
   def bar =  { attrs, body ->
   	   out << "<p>Hello World!</p>"
   }          

   def bodyTag =  { attrs, body ->
      out << "<${attrs.name}>"
           out << body()
      out << "</${attrs.name}>"   	
   }
}{code}

테스트는 다음과 같이 작성한다:

{code:java}
class FooTagLibTests extends GroovyTestCase {

  void testBarTag() {
	   assertEquals "<p>Hello World!</p>", new FooTagLib().bar(null,null)
   }
	    
   void testBodyTag() {
	   assertEquals "<p>Hello World!</p>", new FooTagLib().bodyTag(name:"p") {
	       "Hello World!" 
       }
    }
}{code}

두 번째 예제인 testBodyTag를 잘 살펴보자. 태그의 바디를 반환하는 블럭을 넘기는데 이 것으로 바디의 내용을 쉽게 문자열로 표현할 수 있다.

h4. Testing Tag Libraries with GroovyPagesTestCase(GroovyPagesTestCase로 태그 라이브러리 테스트하기)

위의 예제를 grails.test.GroovyPagesTestCase 클래스를 사용하여 더 쉽게 테스트할 수 있다.

GroovyPagesTestCase 클래스는 GroovyTestCase 클래스의 서브클래스이고 GSP 렌더링의 출력을 테스팅할 수 있는 메소드들이 추가되어 있다.

{note}
GroovyPagesTestCase는 오직 통합 테스트에서만 사용할 수 있다.
{note}

다음과 같이 날짜를 표현하는(formatting) 태그 라이브러리가 있다고 하면:

{code}
class FormatTagLib {
	def dateFormat = { attrs, body -> 
		out << new java.text.SimpleDateFormat(attrs.format) << attrs.date
	}
}
{code}

이 것은 다음과 같이 쉽게 태스트할 수 있다:

{code}
class FormatTagLibTests extends GroovyPagesTestCase {
	void testDateFormat() {
		def template = '<g:dateFormat format="dd-MM-yyyy" date="${myDate}" />'
		
		def testDate = ... // create the date
		assertOutputEquals( '01-01-2008', template, [myDate:testDate] )
	}
}
{code}

또 GroovyPagesTestCase 클래스의 applyTemplate 메소드를 사용하여 GSP의 결과를 얻을 수 있다:

{code}
class FormatTagLibTests extends GroovyPagesTestCase {
	void testDateFormat() {
		def template = '<g:dateFormat format="dd-MM-yyyy" date="${myDate}" />'
		
		def testDate = ... // create the date
		def result = applyTemplate( template, [myDate:testDate] )
		
		assertEquals '01-01-2008', result
	}
}
{code}

h4. Testing Domain Classes(도메인 클래스 테스트하기)

보통 도메인 클래스를 테스트하는 것은 [GORM API|guide:GORM]의 문제이지만 먼저 알아야 하는 것들이 있다. 만약 쿼리를 테스트하고 있다면 데이터베이스에 저장돼 올바른 상태가 보장되도록 종종 “플러쉬(flush)“시켜야만 한다. 예를 들어 다음과 같은 예제가 있다면:


{code:java}
void testQuery() {
	def books = [ new Book(title:"The Stand"), new Book(title:"The Shining")]
	books*.save()
	
	assertEquals 2, Book.list().size()
}
{code}

이 테스트는 [save|domainClasses] 메소드가 호출되면 바로 Book 인스턴스는 저장되지 않으므로 실패할 것이다. save를 호출하는 것은 단지 하이버네이트가 언젠가 인스턴스를 데이터베이스에 저장해야 한다는 것을 알리는 것뿐이다. 만약 즉시 저장되게 하고 싶다면 “플러쉬”시켜야 한다.

{code:java}
void testQuery() {
	def books = [ new Book(title:"The Stand"), new Book(title:"The Shining")]
	books*.save(flush:true)
	
	assertEquals 2, Book.list().size()
}
{code}

이 예제는 flush 인자의 값을 true로 넘기기 때문에 즉시 데이터베이스에 저장된다. 그래서 이제 데이터베이스에 질의해도 된다.
