이전 예제에서 설명한 것처럼 바디도 없고 단순히 내용을 출력하는 태그를 작성하는 일은 아무일도 아니다. 여기에 @dateFormat@ 형식의 태그에 대한 예제도 살펴보자:

{code:java}
def dateFormat = { attrs, body ->
	out << new java.text.SimpleDateFormat(attrs.format).format(attrs.date)
}
{code}

날자형식을 위해서 Java의 @SimpleDateFormat@ 클래스를 사용했고 그 것을 응답에 출력했다. GSP에서 다음과 같이 이 태그를 사용할 수 있다:

{code:xml}
<g:dateFormat format="dd-MM-yyyy" date="${new Date()}" />
{code}

HTML 마크업을 응답에 출력해야 하는 태그를 작성해야 할 수도 있다. 출력할 내용을 바로 삽입하는 방법이 있다:

{code:java}
def formatBook = { attrs, body ->
    out << "<div id=\"${attrs.book.id}\">"	
    out << "Title : ${attrs.book.title}"	
	out << "</div>"
}
{code}

이 방법은 실제로 사용하기엔 너무 지저분하다. [render|tags] 태그를 사용하여 더 낫게 할 수 있다:

{code:java}
def formatBook = { attrs, body ->
    out << render(template:"bookTemplate", model:[book:attrs.book])	
}
{code}

이제 실제로 렌더링되는 GSP 템플릿을 만들었다.

