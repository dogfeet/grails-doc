h4. Redirects(리다이렉트)

[redirect|controllers] 메소드를 사용하여 액션을 리다이렉트(redirect)시킬 수 있다:

{code}
class OverviewController {
    def login = {}

    def find = {
        if(!session.user)
           redirect(action:login)
        ...
    }
}    
{code}

내부적으로 [redirect|controllers]는 [HttpServletResonse|api:javax.servlet.http.HttpServletResponse]객체의 @sendRedirect@ 메소드를 사용한다:


@redirect@ 메소드로 다음과 같은 일을 할 수 있다:

* 동일한 컨트롤러 클래스에서 다른 클로저로 리다이렉트 시킬 수 있다:

{code}
// 동일한 클래스의 login 액션을 호출한다
redirect(action:login)
{code}

* 다른 컨트롤러와 액션으로 리다이렉트 시킬 수 있다:

{code}
// home 컨트롤러의 index 액션으로 리다이렉트된다
redirect(controller:'home',action:'index')
{code}

* 어플리케이션 컨텍스트 경로의 하위에 있는 리소스의 URI로 리다이렉트 시킬 수 있다: 

{code}
// 명시한 URI로 리다이렉트된다
redirect(uri:"/login.html")
{code}        

* URL로도 가능하다:

{code}
// 다른 사이트의 페이지로 리다아렉트 시킨다
redirect(url:"http://grails.org")
{code}

메소드의 @params@ 인자를 사용하여 액션에 파라미터를 넘길 수 있다:

{code}
redirect(action:myaction, params:[myparam:"myvalue"])
{code}


이 파라미터들은 요청 파리미터에 접근할 수 있는 [params|controllers]라는 동적 프로퍼티을 통해서 이용할 수 있다. 만약 어떤 파리마티의 이름이 요청 파라미터와 동일하다면 요청 파라미터는 덮어 씌여져서(is overridden) 컨트롤러의 파라미터가 사용된다.

@params@ 객체는 맵이기 때문에 현재의 요청 파라미터를 다음 액션에 그대로 넘길 수 있다:

{code}
redirect(action:"next", params:params)
{code}

h4. Chaining(체이닝)

액션은 연쇄적으로 묶일 수 있다. 체이닝은 한 액션에서 다음 액션까지 모델이 유지되도록 해준다. 다음 예제의 @first@ 액션이 호출되면:
             
{code}
class ExampleChainController {
    def first = {
        chain(action:second,model:[one:1])
    }
    def second  = {
        chain(action:third,model:[two:2])
    }
    def third = {
         [three:3]
    }
}
{code}


모델의 최종결과는 다음과 같다:

{code}
[one:1, two:2, three:3]
{code}      


모델은 @chainModel@ 맵을 사용하여 다음에 실행되는 컨트롤러의 액션에서도 사용될 수 있다. 다음 예제처럼 액션에서만 이 동적 프로퍼티를 사용할 수 있고 @chain@ 메소드를 호출한다:

{code}
class ChainController {

    def nextInChain = {
        def model = chainModel.myModel
        ...
    }
}
{code}

@redirect@ 메소드처럼 @chain@ 메소드에서도 파라미터를 넘길 수 있다:
                     
{code}
chain(action:"action1", model:[one:1], params:[myparam:"param1"])
{code}


