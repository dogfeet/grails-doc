GORM 에서는 추상 부모 클래스와 영속 GORM 엔터티에서 상속받을 수 있다. 예를 들면:

{code}
class Content {
     String author
}
class BlogEntry extends Content {
    URL url
}
class Book extends Content {
    String ISBN
}
class PodCast extends Content {
    byte[] audioStream
}
{code}

이 예에서 우리는 부모 클래스인 @Content@ 와 다른 특징을 가진 자식 클래스들을 만들었다.

h4. Considerations(고려 사항)

Grails는 기본적으로 상속 구조당 하나의 테이블(table-per-hierarchy)에 매핑한다. 부모 클래스와 그 자식 클래스들은(@BlogEntry@, @Book@, 등등) *동일한* 테이블을 사용하고 식별 칼럼을 두어 구분한다.

상속 구조당 하나의 테이블(table-per-hierarchy)에 매핑하는 것은 'not null'인 프로퍼티를 가질 수 없다는 단점이 있다. 다른 방법으로 [ORM DSL|guide:ormdsl]을 이용하여 클래스당 하나의 테이블(table-per-subclass)에 매핑하는 전략을 사용하는 것이다.

그러나 클래스당 하나의 테이블(table-per-subclass)에 매핑하는 전략을 과도하게 사용하면 조인 쿼리가 남발되기 때문에 쿼리 성능이 형편없어 진다. 우리는 상속을 남용하지말고 상속 계층를 너무 깊게 가져가지 말라고 권고한다.

h4. Polymorphic Queries(쿼리의 다형성)

상속은 다형적으로(polymorphically) 질의할 수 있게 해준다. 예를 들어 @Content@ 부모 클래스에서 [list|domainClasses] 메소드를 사용하면 모든 자식 클래스들이 반환된다:

{code}
def content = Content.list() // 블로그 글, 책, 팟 캐스트 모두 나열된다.
content = Content.findAllByAuthor('Joe Bloggs') // 저자를 기준으로 찾는다.

def podCasts = PodCast.list() //팟 캐스트만 나열된다.
{code}