h4. Using XML(XML 사용)

Bean은 Grails 어플리케이션의 grails-app/conf/spring/resources.xml 파일을 사용하여 설정 할 수 있다. 이 파일은 일반적인 Spring XML 파일이며 Spring 문서는 Spring Bean을 어떤식으로 설정하는지에 대한 [가장 좋은 참고자료|http://static.springframework.org/spring/docs/2.0.x/reference/beans.html#beans-basics]이다. 간단한 예제로서 다음과 같은 형식으로 하나의 Bean을 설정할 수 있다:

{code:xml}
<bean id="myBean" class="my.company.MyBeanImpl"></bean>
{code}

이와 같이 myBean으로 이름지어서 Bean을 한번 설정하면 Grails의 컨트롤러들, 태그라이브러리들, 서비스들 기타 등등에서 사용할 있도록 자동으로 연결된다:

{code:java}
class ExampleController {

     def myBean
}
{code}

h4. Referencing Existing Beans(존재하는 Bean을 참조하기)

resources.xml 파일에 정의된 Bean은 관례에 따라 Grails 클래스를 참조할 수 있다. 예를 들어, 한 Bean에서 BookSerivce와 같은 한 서비스에 대한 참조가 필요하면 클래스 이름으로 표현된 프로퍼티(the property name representation)를 사용한다. 예를 들어, BookService의 경우 bookService가 될 것이다:

{code:xml}
<bean id="myBean" class="my.company.MyBeanImpl">
	<property name="bookService" ref="bookService" />	
</bean>
{code}

Bean은 그 자체로 퍼블릭 지정자(setter)를 필요로 하며 Grails에서는 다음과 같이 정의한다.

{code:java}
package my.company
class MyBeanImpl {
	BookService bookService
}
{code}

자바에서라면 다음과 같다:

{code:java}
package my.company;
class MyBeanImpl {
	private BookService bookService;
	public void setBookService(BookService theBookService) {
		this.bookService = theBookService;
	}
}
{code}

많은 Grails 설정이 관례적으로 런타임에 이루어지기 때문에 Bean들을 아무데나 정의하면 안된다. Spring 설정을 통해서 참조할 수 있도록 해야 한다. 예를 들어, Grails DataSource를 참조할 필요가 있다면 다음과 같이 할 수 있다:

{code:xml}
<bean id="myBean" class="my.company.MyBeanImpl">
	<property name="bookService" ref="bookService" />	
	<property name="dataSource" ref="dataSource" />
</bean>
{code}

Hibernate SessionFactory가 필요하다면 다음과 같이 할 수 있다:

{code:xml}
<bean id="myBean" class="my.company.MyBeanImpl">
	<property name="bookService" ref="bookService" />	
	<property name="sessionFactory" ref="sessionFactory" />
</bean>
{code}

사용가능한 모든 Bean에 대한 참조를 살펴보려면 참조 가이드에서 플러그인 참조를 살펴보라.

h4. Using the Spring DSL(Spring DSL 사용)

Grails가 제공하는 [Spring DSL|guide:springdsl]을 사용하고자 한다면 grails-app/conf/spring/resources.groovy 파일을 만들고 다음과 같은 코드를 가지는 beans로 불리는 메소드를 정의해야 한다.

{code:java}
beans {
	// beans here
}
{code}

XML 예제에 대한 동일한 설정은 다음과 같이 쓸 수 있다:

{code:java}
beans {
	myBean(my.company.MyBeanImpl) {
		bookService = ref("bookService")
	}	
}
{code}

이런 방식에서 주요 장점은 이제 beans 정의안에서 로직을 섞을 수 있다. 환경([environment|guide:environments])에 기반한 예제는 다음과 같다:

{code:java}
import grails.util.*
beans {
	switch(GrailsUtil.environment) {
		case "production":
			myBean(my.company.MyBeanImpl) {
				bookService = ref("bookService")
			}

		break
		case "development":
			myBean(my.company.mock.MockImpl) {
				bookService = ref("bookService")
			}	
		break
	}	
}
{code}

