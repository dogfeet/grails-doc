반복 태그도 역시 간단한다. 다음과 같이 body를 여러번 실행하게 할 수 있다.

{code:java}
def repeat = { attrs, body ->
    attrs.times?.toInteger().times { num ->
        out << body(num)
    }
}
{code}

이 예제에서는 @times@ 속성을 검사하고 만약 숫자로 변환되면 Groovy의 @times@ 메소드를 사용하여 명시된 횟수만큼 반복한다:

{code:xml}
<g:repeat times="3">
<p>Repeat this 3 times! Current repeat = ${it}</p>
</g:repeat>
{code}

이 예제의 @it@ 변수가 어떻게 현재 반복 횟수를 의미되었는지를 기억하라. 이 것은 반복 코드에 현재 반복 횟수를 인자로 넘겨줬기 때문에 가능한 일이다:

{code:java}
        out << body(num)
{code}

이 값은 태그에서 사용할 수 있는 변수 @it@으로 넘겨진다. 만약 중첩하여 태그를 사용하면 충돌을 일으킬 수 있다. 따라서 바디에서 사용할 변수이름을 지정해야 한다:

{code:java}
def repeat = { attrs, body ->
	def var = attrs.var ? attrs.var : "num"
    attrs.times?.toInteger().times { num ->
        out << body((var):num)
    }
}
{code}

@var@ 속성이 있는지 검사하고 만약 속성이 존재하면 바디를 호출하는 줄에서 파라미터로 사용한다:

{code:java}
        out << body((var):num)
{code}

{note}
변수 이름에 괄호를 사용한 것을 기억하라. 괄호를 생략하면 Groovy는 var 변수를 사용하는 것이 아니라 문자열 키를 사용한다고 간주한다.
{note}

이제 다음과 같이 태그를 사용할 수 있다:

{code:xml}
<g:repeat times="3" var="j">
<p>Repeat this 3 times! Current repeat = ${j}</p>
</g:repeat>
{code}

변수 @j@를 정의하기 위해서 @var@ 속성을 어떻게 사용했는지를 기억하라. 이제 태그의 바디에서 이 변수를 참조할 수 있다.
