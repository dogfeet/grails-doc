데이터 바인딩은 요청 파라미터를 객체의 프로퍼티이나 객체에 "결합"시키는(binding) 행위를 말한다. 데이터 바인딩시 폼(form)을 통해서 요청되는 일반적인 파리마터들의 형 변환을 고려해야 한다. 이 파라미터들은 Groovy나 Java 객체의 프로퍼티가 아니라 항상 문자열이다.

Grails는 [Spring's|http://www.springframework.org]이 제공하는 데이터 바인딩 기능을 이용하여 데이터를 바인딩한다.

h4. Binding Request Data to the Model(요청 데이터를 모델에 바인딩하기)

도메인 클래스의 프로퍼티로 요청 파라미터를 바인딩시키는 방법은 두 가지다. 먼저 도메인 클래스의 묵시적(implicit) 생성자를 사용할 수 있다.

{code:java}
def save = {
  def b = new Book(params)
  b.save()
}
{code}

@new Book(params)@에서 데이터를 바인딩 시킨다. Grails는 [params|controllers] 객체를 도메인 클래스의 생성자에 넘기면 자동으로 요청 파라미터를 바인딩해야 하는 것으로 간주한다. 만약 다음과 같은 요청이 들어온다면:

{code:java}
/book/save?title=The%20Stand&author=Stephen%20King
{code}

@title@과 @author@은 자동으로 도메인 클래스에 설정된다. 만약 존재하는 인스턴스로 바인딩해야 한다면 [properties|domainClasses] 프로퍼티를 이용할 수 있다:

{code:java}
def save = {
  def b = Book.get(params.id)
  b.properties = params
  b.save()
}
{code}

이 것은 묵시적 생성자를 사용한 것과 동일하다.

h4. Data binding and Associations(데이터 바인딩과 관계)

'일대일'이나 '일대다' 관계에서도 Grails가 데이터 바인딩 기능을 적용하여 관계를 업데이트할 수 있다. 다음과 같은 요청이 들어오면:

{code:java}
/book/save?author.id=20
{code}

다음의 예제처럼 데이터를 바인딩시킬 때 Grails는 자동으로 요청 파라미터의 @.id@ 접미어를 해석하고 이 정보를 이용하여 @Author@ 인스턴스 찾아낸다.

{code:java}
def b = new Book(params)
{code}

h4. Data binding with Multiple domain classes(데이터를 여러 개의 도메인 클래스에 바인딩하기)

[params|controllers] 객체를 이용하여 여러 개의 도메인 객체에 데이터를 바인딩 시킬 수 있다. 

다음과 같은 요청이 들어오면:

{code:java}
 /book/save?book.title=The%20Stand&author.name=Stephen%20King
{code}

이 요청의 각 파라미터가 @author.@와 @book.@같은 접두어(Prefix)를 갖는다는 것에 주목해야 한다. 타입에 따라 파라미터를 분리해서 사용해야 한다. Grails의 @params@ 객체는 다차원 해시같은 것이다. 바인딩 시킬 파라미터만을 분리 할 수 있다:

{code:java}
def b = new Book(params['book'])
{code}

바인드할 파라미터만을 분리하기 위해 @book.title@의 '.' 앞의 접미어만을 사용하는 것을 기억하라. 동일한 방법을 @Author@ 클래스에도 적용할 수 있다:

{code:java}
def a = new Author(params['author'])
{code}

h4. Data binding and type conversion errors(데이터 바인딩과 타입 변환 에러)

데이터를 바인딩시킬 때 문자열이 특별한 타입으로 변환되지 않는다. 이 때 타입 변환 에러가 발생하는데 Grails는 타입 변환 에러를 도메인 클래스의 [errors|domainClasses] 프로퍼티에 남겨둔다. 예제를 보자:

{code:java}
class Book {
    ...
    URL publisherURL
}
{code}

여게에 Java의 @java.net.URL@을 사용하는 도메인 클래스 @Book@이 있고 요청은 다음과 같다고 할 때:

{code:java}
  /book/save?publisherURL=a-bad-url
{code}

문자열 @a-bad-url@이 @publisherURL@ 프로퍼티에 바인드되지 않고 타입 미스매치 에러가 발생한다. 에러를 다음의 예제처럼 처리할 수 있다:

{code:java}
def b = new Book(params)

if(b.hasErrors()) {
   println "The value ${b.errors.getFieldError('publisherURL').rejectedValue} is not a valid URL!"
}
{code}

여기서 모든 에러 코드를 다루진 않는다(자세한 정보는 유효성 검사(validation)을 봐라). 또, @grails-app/i18n/messages.properties@ 파일을 사용하여 타입 변환 에러 메시지를 보여줄 수 있다. 다음과 같이 일반 에러 메시지 핸들러를 사용할 수 있다:

{code:java}
typeMismatch.java.net.URL=The field {0} is not a valid URL
{code}

좀 더 구체적인 핸들러도 만들 수 있다:

{code:java}
typeMismatch.Book.publisherURL=The publisher URL you specified is not a valid URL
{code}

h4. Data Binding and Security concerns(데이터 바인딩과 보안)

요청 파라미터를 이용하여 프로퍼티을 업데이트할 때 도메인 클래스에 악성 데이터(malicious data)를 집어넣으려는 사용자를 조심해야 한다. 이 것은 데이터베이스에 저장하기 전에 처리돼야 한다.

이 문제를 해결하기 위해 두 가지 방법을 사용할 수 있다. 하나는 [Command Objects|guide:commandObjects]를 사용하는 것이고 다른 하나는 유연한 [bindData|controllers] 메소드를 사용하는 것이다.

@bindData@ 메소드는 데이터 바인딩 기능과 동일한 일을 하지만 임의의 객체에 사용할 수 있다:

{code:java}
def sc = new SaveCommand()
bindData(sc, params)
{code}

그리고 @bindData@ 메소드는 업데이트되길 원치 않는 파라미터들을 제외시킬 수 있다:

{code:java}
def sc = new SaveCommand()
bindData(sc, params, ['myReadOnlyProp'])
{code}



