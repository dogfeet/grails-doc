h4. Sets of objects(집합)

관계를 만들면 GORM은 기본적으로 @java.util.Set@을 이용한다. 이 것은 정렬되지 않으며 중복을 허용하지 않는 컬렉션이다. 다음의 Author 클래스가 있다면

{code}
class Author {
   static hasMany = [books:Book]
}
{code}

GORM은 이 books 프로퍼티를 @java.util.Set@형식으로 만든다. 컬렉션을 사용할 때 정렬되지 않았다는 것이 문제가 될 수 있다. 정렬된 컬렉션을 사용하길 원한다면 다음처럼 books를 @SortedSet@으로 명시한다.

{code}
class Author {
   SortedSet books
   static hasMany = [books:Book]
}
{code}

@java.util.SortedSet@을 사용하는 경우에는 Book 클래스에 @java.lang.Comparable@을 구현해야 한다.

{code}
class Book implements Comparable {
   String title
   Date releaseDate = new Date()

   int compareTo(obj) {
       releaseDate.compareTo(obj.releaseDate)
   }
}
{code}

이 예제대로 라면 Author 클래스의 books 프로퍼티에 Book 객체들이 있게된다. Book 객체들은 releaseDate를 기준으로 정렬될 것이다.

h4. Lists of objects(리스트)

단순하게 집합을 객체가 추가된 순서로 유지하고 배열처럼 인덱스로 객체를 참조하게 하고 싶을 땐 @List@를 사용하면 된다:

{code}
class Author {
   List books
   static hasMany = [books:Book]
}
{code}

books 컬렉션의 순서는 객체를 추가한 순서대로 유지된다. 0부터 시작하는 인덱스를 이용하여 다음과 같이 사용할 수 있다:

{code}
author.books[0] // 첫 번째 책
{code}

데이터베이스 수준에서 일어나는 일을 살펴보면 Hibernate는 books_idx 컬럼을 생성한다. 데이터베이스에서도 순서를 지키기위해서 @book_idx@에 컬렉션 요소(element)의 인덱스를 저장한다.

@List@를 사용할 때 요소를 저장하기 전에 컬렉션에 추가해야 한다. 그렇지 않으면 Hibernate는 예외를 던질 것이다(@org.hibernate.HibernateException: null index column for collection@):

{code}
// This won't work!
def book = new Book(title: 'The Shining')
book.save()
author.addToBooks(book)

// Do it this way instead.
def book = new Book(title: 'Misery')
author.addToBooks(book)
author.save()
{code}

h4. Maps of Objects(맵)

만약 string/value 쌍만으로 이루어진 단순한 맵을 원하면 다음처럼 사용하면 된다:

{code}
class Author {
   Map books // map of ISBN:book names
}

def a = new Author()
a.books = ["1590597583":"Grails Book"]
a.save()
{code}

맵의 키와 값은 모두 *반드시* 문자열이어야 한다.

객체의 맵을 원한다면 다음처럼 한다.

{code}
class Book {
  Map authors
  static hasMany = [authors:Author]
}

def a = new Author(name:"Stephen King")

def book = new Book()
book.authors = [stephen:a]
book.save()
{code}

static @hasMany@ 프로퍼티로 맵의 요소의 형식을 정의할 수 있다. 이 맵의 키는 *반드시* 문자열이어야 한다.
