h4. Returning the Model(모델 반환하기)

모델은 엄밀히 렌더링할 때 뷰에서 사용하는 맵이다. 이 맵의 키는 뷰에서 접근할 수 있는 변수 이름으로 변환된다. 모델을 반환하는 방법은 두 가지이다. 하나는 명시적으로 맵 인스턴스를 반환하는 방법이다:

{code:java}
def show = {
 	[ book : Book.get( params.id ) ]
}
{code}

명시적으로 반환하는 모델이 없으면 컨트롤러의 프로퍼티들이 모델로 사용된다. 그래서 다음과 같이 코드를 작성할 수 있다:

{code:java}
class BookController {
    List books
    List authors
    def list = {
           books = Book.list()
           authors = Author.list()
    }
}
{code}

{note}
 이 것은 실제로 컨트롤러도 미리정의된(prototyped) 스콥이기 때문에 가능하다. 즉, 요청마다 새로운 컨트롤러가 생성된다. 요청마다 새로운 컨트롤러가 생성되지 않으면 이 코드는 쓰레드에 안전(thread safe)하지 못하다.
{note}

이 예제의 @books@와 @authors@ 프로퍼티는 뷰에서 사용할 수 있다.

스프링의 [ModelAndView|api:org.springframework.web.servlet.ModelAndView] 클래스의 인스턴스를 반환할 수도 있는데 이 것은 좀 더 고급스런 방법이다.

{code:java}
import org.springframework.web.servlet.ModelAndView

def index = {
	// index 페이지를 위해 선호하는 책들을 가져온다.
    def favoriteBooks = ... 
    // 이 책들을 보여주기 위해 list 뷰로 넘긴다.
    return new ModelAndView("/book/list", [ bookList : favoriteBooks ])
}
{code}


h4. Selecting the View(뷰 선택하기)

여기까지 보여준 코드에서는 렌더링할 [view|guide:GSP]를 명시하는 코드는 없었다. Grails는 어떤 뷰를 선택해야 하는지를 어떻게 알까? 해답은 '관례'에 있다. 다음과 같이 액션을 만든다:

{code:java}
class BookController {
	def show = {
	 	[ book : Book.get( params.id ) ]
	}	
}
{code}

Grails는 자동으로 @grails-app/views/book/show.gsp@라는 뷰를 찾을 것이다. 엄밀하게 Grails는 JSP 파일을 먼저 찾는다. Grails에서는 JSP도 사용할 수 있다.

다른 뷰를 사용하기 원한다면 다음처럼 [render|controllers] 메소드를 사용하여 변경할 수 있다.


{code:java}
def show = {
  	def map = [ book : Book.get( params.id ) ]
    render(view:"display", model:map)
}	
{code}

이 예제에서 Grails는 @grails-app/views/book/display.gsp@를 렌더링하려고 할 것이다. Grails는 @grails-app/views@ 디렉토리의 @book@ 폴더에 있는 뷰를 사용하려 한다는 사실에 주목하라. 이 것이 관례이다. 이 관례 대신에 shared 뷰를 사용하게 하고 싶으면 다음과 같이 하라:

{code:java}
def show = {
  	def map = [ book : Book.get( params.id ) ]
    render(view:"/shared/display", model:map)
}	
{code}

이 예제에서 Grails는 @grails-app/views/shared/display.gsp@를 이용하여 렌더링할 것이다.

h4. Rendering a Response(응답 만들기)

(일반적으로 Ajax 어플리케이션에서는)텍스트나 코드의 조각(snippet)을 컨트롤러에서 바로 렌더링하는 것이 더 쉬울때도 있다. 이 경우 대단히 유연한 @render@ 메소드를 사용한다:

{code:java}
render "Hello World!"
{code}

이 코드는 "Hello World!"를 응답으로 전달할 것이다. render 메소드로 할 수 있는 다른 예도 보자:


{code:java}
// write some markup
render {
   for(b in books) {
      div(id:b.id, b.title)
   }
}
// 사용할 뷰를 명시한다
render(view:'show')
// 컬렉션의 각 아이템에 템플릿을 적용한다
render(template:'book_template', collection:Book.list())
// 명시한 엔코딩(encoding)과 컨텐트 타입(content type)에 따라 text를 렌더링한다
render(text:"<xml>some xml</xml>",contentType:"text/xml",encoding:"UTF-8")
{code}


