Ajax의 X는 XML을 의미하고 Ajax를 구현하는 방법은 매우 다양하지만 일반적으로 다음과 같이 나눌 수 있다:

* 내용을 위한 Ajax(Content Centric Ajax) - 단지 페이지를 업데이트하기 위해 HTML의 결과만을 사용한다.
* 데이터를 위한 Ajax(Data Centric Ajax) - 서버에서는 XML이나 JSON형식의 응답을 보내고 페이지를 프로그램적으로 업데이트한다.
* 스크립트를 위한 Ajax(Script Centric Ajax) - 서버는 바로 실행될 자바스크립트를 보낸다.

[Ajax|guide:ajax] 절의 예제들은 대부분 페이지를 업데이트하는 내용을 위한 Ajax에 대해 다룬다. 그러나 데이터나 스크립트를 위한 Ajax도 필요할 것이다. 이 문서는 그런 스타일의 Ajax도 다룬다.

h4. Content Centric Ajax(내용을 위한 Ajax)

내용을 위한 Ajax는 서버에서 HTML을 전송하는 것을 말한다. 이 것은 일반적으로 [render|controllers] 메소드로 템플릿을 렌더링함으로써 이루어진다:

{code:java}
def showBook = {
	def b = Book.get(params.id)
	
	render(template:"bookTemplate", model:[book:b])
}
{code}

클라이언트에서는 [remoteLink|tags] 태그로 이 속성을 호출한다:

{code:xml}
<g:remoteLink action="showBook" id="${book.id}" update="book${book.id}">Update Book</g:remoteLink>
<div id="book${book.id}">
   <!--existing book mark-up -->
</div>
{code}

h4. Data Centric Ajax with JSON(Ajax 데이터에 JSON 사용하기)

데이터를 위한 Ajax는 일반적으로 클라이언트에서 이 응답을 처리한 후 프로그램으로 페이지를 업데이트 하는 것을 말한다. Grails에서 JSON 응답을 사용하기 위해 Grails의 JSON 마샬링([JSON marshaling|guide:JSON]) 기능을 사용 할 수 있다:

{code:java}
import grails.converters.*

def showBook = {
	def b = Book.get(params.id)
	
    render b as JSON	
}
{code} 

그리고 클라이언트에서는 Ajax 이벤트 핸들러를 사용하여 JSON 요청을 파싱한다:

{code:xml}
<g:javascript>
function updateBook(e) {
	var book = eval("("+e.responseText+")") // evaluate the JSON
	$("book"+book.id+"_title").innerHTML = book.title
}
<g:javascript>
<g:remoteLink action="test" update="foo" onSuccess="updateBook(e)">Update Book</g:remoteLink>
<g:set var="bookId">book${book.id}</g:set>
<div id="${bookId}">
	<div id="${bookId}_title">The Stand</div>
</div>
{code}

h4. Data Centric Ajax with XML(Ajax 데이터에 XML 사용하기)

서버에서 XML을 사용하는 것도 매우 쉽다:

{code:java}
import grails.converters.*

def showBook = {
	def b = Book.get(params.id)
	
    render b as XML	
}
{code}

하지만 클라이언트에서 DOM을 처리해야 하기 때문에 좀 더 복잡하다:

{code:xml}
<g:javascript>
function updateBook(e) {
	var xml = e.responseXML
	var id = xml.getElementsByTagName("book").getAttribute("id")
	$("book"+id+"_title")=xml.getElementsByTagName("title")[0].textContent
}
<g:javascript>
<g:remoteLink action="test" update="foo" onSuccess="updateBook(e)">Update Book</g:remoteLink>
<g:set var="bookId">book${book.id}</g:set>
<div id="${bookId}">
	<div id="${bookId}_title">The Stand</div>
</div>
{code}

h4. Script Centric Ajax with JavaScript(스크립트를 위한 Ajax에서 자바스크립트 사용하기)

스크립트를 위한 Ajax는 실제로 클라이언트에서 실행할 수 있는 자바스크트를 전송한다. 다음은 이 것에 대한 예제이다:

{code:java}
def showBook = {
	def b = Book.get(params.id)

    response.contentType = "text/javascript"
    String title = b.title.encodeAsJavascript()
    render "\$('book${b.id}_title')='${title}'"
}
{code}

contentType을 text/javascript로 설정해야 하는 것을 기억하라. 만약 Prototype을 사용하고 있다면 contentType을 설정한 것 때문에 반환된 Javacript가 자동으로 실행된다.

클라이언트가 수정되서 서버가 망가지길 바라지 않는다면 클라이언트에서 약속된agreed API를 사용해야 한다. 이 것은 Rails의 RJS같은 것이 필요한 이유이다. Grails에는 RJS같은 기능은 없지만 동적 자바스크립트 플러그인([Dynamic JavaScript Plug-in|http://grails.org/Dynamic+Javascript+Plugin])으로 유사한 일을 할 수 있다.

