h4. Programmatic File Uploads(파일 업로드 프로그래밍)

Grails에서의 파일 업로드는 Spring의 [MultipartHttpServletRequest|api:org.springframework.web.multipart.MultipartHttpServletRequest]를 통해서 지원된다. 파일을 업로드하기 위해서 먼저 다음의 예제같이 멀티파트 폼(multipart form)을 만든다:

{code:xml}
Upload Form: <br />
	<g:form action="upload" method="post" enctype="multipart/form-data">
		<input type="file" name="myFile" />
		<input type="submit" />
	</g:form>
{code}

몇 가지 방법으로 파일 업로드를 처리할 수 있다. 먼저 Spring의 [MultipartFile|api:org.springframework.web.multipart.MultipartFile] 인스턴스를 사용하는 방법부터 살펴보자:

{code:java}
def upload = {
    def f = request.getFile('myFile')
    if(!f.empty) {
      f.transferTo( new File('/some/local/dir/myfile.txt') )
      response.sendError(200,'Done');
    }    
    else {
       flash.message = 'file cannot be empty'
       render(view:'uploadForm')
    }
}
{code}

[MultipartFile|api:org.springframework.web.multipart.MultipartFile] 인스턴스를 통해서 InputStream을 획득할 수 있기 때문에 이 방법은 다른 위치에 파일을 저장하고 직접 파일을 조작할 때 유용하다. .

h4. File Uploads through Data Binding(데이터 바인딩으로 파일 업로드 처리하기)

파일 업로드는 데이터 바인딩으로도 처리할 수 있다. 다음 예제는 @Image@ 도메인 클래스이다:

{code:java}
class Image {
   byte[] myFile
}
{code}	

다음의 예제처럼 image 객체를 만들고 params 객체를 파라미터로 넘긴다면 Grails는 자동으로 file을 바이트(byte) 타입의 myFile 프로퍼티에 바인딩 시킬 것이다:

{code:java}
def img = new Image(params)
{code}

Image 클래스의 myFile 프로퍼티의 형식을 String 형식으로 바꾸어 파일의 내용을 String 형식으로 만드는 것도 가능하다:

{code:java}
class Image {
   String myFile
}
{code}	

