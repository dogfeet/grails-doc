h4. Per Environment Configuration (환경별 설정)

Grails는 환경마다 설정할 수 있다. grails-app/conf디렉토리에 있는 Config.groovy파일과, DataSource.groovy파일이 환경단위로 설정할 수 있도록 돕는다. 각 파일들은 "ConfigSlurper":http://groovy.codehaus.org/ConfigSlurper 의 문법을 따른다. 다음은 Grails에서 제공하는 기본 DataSource의 정의를 예로 든 것이다.

{code:java}
dataSource {
    pooled = false                          
    driverClassName = "org.hsqldb.jdbcDriver"	
    username = "sa"
    password = ""				
}
environments {
    development {
        dataSource {
            dbCreate = "create-drop" // one of 'create', 'createeate-drop','update'
            url = "jdbc:hsqldb:mem:devDB"
        }
    }   
    test {
        dataSource {
            dbCreate = "update"
            url = "jdbc:hsqldb:mem:testDb"
        }
    }   
    production {
        dataSource {
            dbCreate = "update"
            url = "jdbc:hsqldb:file:prodDb;shutdown=true"
        }
    }
}
{code}

최상위 수준에 정의한 설정을 기억해야 한다. environments 블럭에는 DataSource의 url 프로퍼티과 dbCreate를 위해 환경마다 블럭을 정의하였다. 이 문법은 Config.groovy에서도 사용된다.

h4. Packaging and Running for Different Environments (다양한 환경을 위한 패키징과 실행)

Grails는 특정 환경단위로 [명령|guide:commandLine]을 실행할 수 있도록 지원한다. 그 형식은 다음과 같다:

{code:java}
grails [environment] [command name]
{code}

또한 Grails에는 dev, prod, test이라는 미리 만들어진 환경이 3개있다. dev, prod, test는 각각 개발(development), 서비스(production), 테스트(test)를 위한 것이다. 예를 들어 테스트 환경에서 WAR를 만들기 위해서는 명령어를 다음과 같이 사용해야 한다.

{code:java}
grails test war
{code}

만약에 또 다른 환경을 가지고 있다면 @grails.env@ 변수를 통해서 그 환경을 지정할 수 있다. 아래는 그 예이다:

{code:java}
grails -Dgrails.env=UAT run-app
{code}

h4. Programmatic Environment Detection (프로그램에 의한 환경 검사)

[GrailsUtil|api:grails.util.GrailsUtil] 클래스를 Gant 스크립트나 부트스트랩 클래스 같은 곳에 사용함으로써 환경을 찾아낼 수 있다:

{code:java}
import grails.util.GrailsUtil

...

switch(GrailsUtil.environment) {
	case "development":
	   configureForDevelopment()
	break
	case "production":
	   configureForProduction()
	break 
}
{code}