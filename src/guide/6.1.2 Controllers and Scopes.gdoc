h4. Available Scopes(이용할 수 있는 스콥)

스콥는 본질적으로 변수를 저장할 수 있는 해시 객체다. 컨트롤러에서 사용가능한 스콥은 다음과 같다.

* [servletContext|controllers] - 어플리케이션 스콥이라고도 한다. 이 스콥은 전체 웹 어플리케이션의 상태를 공유할 수 있게 한다. 이 servletContext는 [javax.servlet.ServletContext|api:javax.servlet.ServletContext]의 인스턴스다.
* [session|controllers] - 이 session은 사용자의 상태와 관련돼 있다. 일반적으로 클라이언트의 세션과 연관된 쿠키를 사용한다. 이 session은 [HttpSession|api:javax.servlet.http.HttpSession]의 인스턴스다.
* [request|controllers] - 이 request 객체에는 현재 요청과 관련된 객체들을 저장할 수 있다. 이 * * request는 HttpServletRequest의 객체이다.
* [params|controllers] - 요청(CGI) 파리미터들의 맵이다.
* [flash|controllers] - 나중에 설명한다.

h4. Accessing Scopes(스콥 사용하기)

스콥은 변수 이름과 Groovy의 배열 인덱스 연산자를 이용하여 접근할 수 있다. 이 것은 [HttpServletRequest|api:javax.servlet.http.HttpServletRequest]같은 Servlet API에 정의돼 있는 클래스들을 사용한다.

{code:java}
class BookController {
    def find = {
        def findBy = params["findBy"]
        def appContext = request["foo"]
        def loggedUser = session["logged_user"]

    }
}
{code}

코드을 더 명료하게 하는 역참조(de-reference) 연산자로 Scope 변수에 접근할 수도 있다:

{code:java}
class BookController {
    def find = {
        def findBy = params.findBy
        def appContext = request.foo
        def loggedUser = session.logged_user

    }
}
{code}

이 방법은 Grails가 스콥들에 통일된 방법으로 접근할 수 있도록 제공하는 방법중 한 가지 방법이다.

h4. Using Flash Scope(Flash 스콥)

Grails는 [flash|controllers] 스콥을 지원한다. flash 스콥에는 현재 요청부터 다음 요청까지 전달해야 할 프로퍼티를 저장할 수 있다. 그 후 이 프로퍼티는 지워진다. 리다이렉션으로 바로 처리될 메시지를 전달하는데 유용하다. 예를 들어:

{code:java}
def delete = {
    def b = Book.get( params.id )
    if(!b) {
        flash.message = "User not found for id ${params.id}"
        redirect(action:list)
    }
    ... // remaining code
}
{code}
