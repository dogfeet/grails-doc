다음은 [save|domainClasses] 메소드를 사용하는 예이다.

{code}
def p = Person.get(1)
p.save()
{code}

Hibernate와 가장 큰 차이점은 [save|domainClasses] 메소드를 호출할 때 어떠한 SQL도 실행할 필요가 없다는 것이다. 보통 Hibernate는 SQL 문을 모았다가 끝날때 일괄 처리한다. Grails는 Hibernate Session을 관리해서 자동으로 이 일을 해낸다.

그러나 SQL 문이 언제 실행돼야 하는지를 결정하고 싶을 때도 있다. Hibernate에서는 이 것을 세션을 "flush" 했다라고 한다. 이렇게 하기 위해서 다음처럼 save 메소드를 호출할 때 flush를 인자로 넘길 수 있다.

{code}
def p = Person.get(1)
p.save(flush:true)
{code}

이전의 save를 포함하여 지연된 모든 SQL 문장들이 DB와 동기화될 것이다. 이 때 예외를 처리할 수 있다. 이 예외처리는 일반적으로 낙관적 잠금([optimistic locking|guide:5.3.5 Pessimistic and Optimistic Locking])을 포함하는 고도의 동시적concurrent 시나리오에 유용하다.

{code}
def p = Person.get(1)
try {
	p.save(flush:true)
}
catch(Exception e) {
	// deal with exception
}
{code}