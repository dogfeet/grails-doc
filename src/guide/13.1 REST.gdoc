REST는 사실 그 자체로는 어떠한 기술도 아니고 구조적인 형태이다. REST는 매우 간단하고 URL형태와 결합된 보통의 XML이나 JSON을 통신 매체로 사용하는 것이다. 이 URL 형태은 기존(underlying) 시스템의 “표현(representational)“과 GET, PUT, POST, DELETE와 같은 HTTP 메소드을 의미한다.

각 HTTP메소드는 하나의 액션에 연결된다. 예를들어 GET은 데이터를 얻어오기위해, PUT은 데이터를 생성하기위해, POST는 데이터를 수정하기위해, DELETE는 데이터를 삭제하기위해 사용한다. 이러한 점에서, REST는 [CRUD|guide:scaffolding]에 매우 잘 들어맞는다.

h4. URL patterns(URL 패턴)

Grails로 REST를 구현하기위한 첫번째 과정은 RESTful URL 매핑([URL mappings|guide:mappings])을 제공하는것이다:

{code:java}
static mappings = {
   "/product/$id?"(controller:"product"){
       action = [GET:"show", PUT:"update", DELETE:"delete", POST:"save"]
   }	
}
{code}

컨트롤러에게 RESTful API를 제공하기 위해 HTTP메소드에 매핑하는 URL 매핑([map to HTTP methods|guide:6.4.5 Mapping to HTTP methods])의 기능을 사용했다. GET, PUT, POST, DELETE 같은 각 HTTP 메소드들은 Controller의 액션에 매핑된다.

h4. XML Marshaling - Reading(XML 마샬링 - 읽기)

컨트롤러의 GET 메소드 액션은 Grail의 XML 마셜링([XML marshaling|guide:XML]) 기능을 사용하여 구현할 수 있다:

{code:java}
import grails.converters.*
class ProductController {
	def show = {
		if(params.id && Product.exists(params.id)) {
			def p = Product.findByName(params.id)
			render p as XML
		}
		else {
			def all = Product.list()
			render all as XML
		}
	}
	..
}
{code}

이제 만약 좀 더 해야 할 일이 있다면 이름으로 제품의 id을 찾아 반환하거나 모든 제품을 반한하는 것이다. 이 방식에서 /products 로 간다면 모든 제품을 얻을 것이고, 아니면 /products/MacBook으로 간다면 하나의 MacBook만을 얻을 것이다.

h4. XML Marshalling - Updating(XMl 마샬링 - 업데이트)

PUT과 POST 같은 업데이트를 지원하기 위해서 params 객체를 쓸 수 있다. [params|controllers] 객체는 XML로부터 들어오는 정보를 Grails가 접근하기 쉽도록 개선해놓은 것이다. 다음과 같은 들어오는 XML 패킷이 있다:

{code:xml}
<?xml version="1.0" encoding="ISO-8859-1"?>
<product>
	<name>MacBook</name>
	<vendor id="12">
		<name>Apple</name>
     </vender>
</product>
{code}

데이터 바인딩 절에서 설명한 기술을 이용하는 params 객체를 통해 이 XML 패킷을 읽을 수 있다:

{code:java}
def save = {
	def p = new Product(params['product'])
	
	if(p.save()) {
		render p as XML
	}
	else {
		def errors = p.errors.allErrors.collect { g.message(error:it) }
		render(contentType:"text/xml") {
			error {
				for(err in errors) {
					message(error:err)
				}
			}
		}
	}
}
{code}

이 예제에서 params 객체속에서 'project'키를 사용하여 인덱싱함으로써 Product 클래스의 생성자를 이용하여 xml을 자동으로 생성하고 바인딩할 수 있다. 아래 코드는 그 예제이다:

{code:java}
def p = new Product(params['product'])
{code}

폼 데이터를 전송하는 코드와 XML 요청을 다루는 코드 모두 수정할 필요 없고 XML 요청 뿐만아니라 JSON 요청에도 동일한 방법을 사용할 수 있다.

{note}
만약 여러 클라이언트(REST, HTML 기타)에 대해 여러 응답이 필요하다면 컨텐츠 협상([content negotation|guide:contentNegotiation])을 사용할 수 있음
{note}

그래서 Product 객체는 XML로 저장되고 표현되며, 그렇지 않으면 오류 메시지가 생성된다. 오류 메시지는 Grails의 검증([validation|guide:validation])지원을 사용하여 아래와 같은 형식으로 표현된다:

{code:xml}
<error>
   <message>The property 'title' of class 'Person' must be specified</message>
</error>
{code} 