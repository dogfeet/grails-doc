Grails는 뷰뿐만 아니라 템플릿도 지원한다. 템플릿은 뷰를 쉽게 관리할 수 있게 만들기 때문에 유용하고 구조적인 뷰를 위해 훌륭한 재사용 매커니즘을 제공하는 [Layouts|guide:layouts]과 함께 사용할 수 있다.

h4. Template Basics(템플릿의 기초)

Grails는 템플릿을 식별하기 위해서 뷰의 이름 앞에 '_'를 붙이는 관례를 사용한다. 예를 들어 Book을 렌더링하는 템플릿은 @grails-app/views/book/_bookTemplate.gsp@에 위치한다:

{code:xml}
<div class="book" id="${book?.id}">
   <div>Title: ${book?.title}</div>
   <div>Author: ${book?.author?.name}</div>
</div>
{code}

@grails-app/views/book@에 있는 뷰에서 템플릿을 렌더링하려면 [render|tags] 태그를 사용해야 한다:

{code:xml}
<g:render template="bookTemplate" model="[book:myBook]" />
{code}

@render@ 태그의 @model@ 속성이 어떻게 사용되고 있는지 기억하라. @Book@ 인스턴스가 많을 때 @render@ 태그와 템플릿을 사용하여 Book 인스턴스들을 렌더링할 수 있다:

{code:xml}
<g:render template="bookTemplate" var="book" collection="${bookList}" />
{code}

h4. Shared Templates(템플릿 공유하기)

위의 예제에서 우리는 템플릿을 BookController와 grails-app/views/book에서만 사용했다. 그러나 템플릿을 어플리케에션 전체에서 공유할 수도 있다.

이 경우에 뷰들의 루트 디렉토리인 grails-app/views나 그 하위 디렉토리에 템플릿을 위치시킨다. 그리고 template 속성에 템플릿 이름 앞에 '/'과 상대경로를 더해서 명시한다. grails-app/views/shared/_mySharedTemplate.gsp라는 템플릿이 있으면 다음과 같이 사용할 수 있다:

{code:xml}
<g:render template="/shared/mySharedTemplate" />
{code}

뷰와 컨트롤러의 디렉토리에 있는 템플릿도 사용할 수 있다:

{code:xml}
<g:render template="/book/bookTemplate" model="[book:myBook]" />
{code}

h4. Templates in Controllers and Tag Libraries(컨트롤러와 테그 라이브러리에서 템플릿 사용하기)

컨트롤러에서도 [render|controllers] 메소드를 사용하여 템플릿을 렌더링할 수 있다. 이 것은 [Ajax|guide:ajax] 어플리케이션에 유용하다:

{code:java}
def show = {
    def b = Book.get(params.id)
	render(template:"bookTemplate", model:[book:b])
}
{code}

컨트롤러에서 [render|controllers] 메소드를 사용하면 응답에 바로 씌여진다. 이 것이 가장 일반적인 용법이지만 템플릿의 결과를 알고 싶다면 다음과 같이 [render|tags] 태그를 사용할 수 있다:

{code:java}
def show = {
    def b = Book.get(params.id)
	String content = g.render(template:"bookTemplate", model:[book:b])
	render content
}
{code}

@g.@ 네임스페이스를 사용하면 Grails는 [render|controllers] 메소드가 아니라 [render 태그|guide:6.2.2.6 Tags as Method Calls]를 사용하는 것이라고 해석한다.
